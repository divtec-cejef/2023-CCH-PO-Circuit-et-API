on: 
  pull_request:
    branches:
    - main
  workflow_dispatch:

jobs:
  testing:
    services:
          # Label used to access the service container
          postgres:
            # Docker Hub image
            image: postgres
            # Provide the password for postgres
            env:
              POSTGRES_PASSWORD: postgres
              POSTGRES_HOST_AUTH_METHOD: trust
            # Set health checks to wait until postgres has started
            options: >-
              --health-cmd pg_isready
              --health-interval 10s
              --health-timeout 5s
              --health-retries 5
            ports:
              # Maps tcp port 5432 on service container to the host
              - 5432:5432

    name: Run api tests
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
    - run: |
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends postgresql-client
          cd SQL
          psql -h localhost -U postgres -d postgres -w -a -f schemaCreation.sql
          psql -h localhost -U postgres -d postgres -w -a -f tablesCreation.sql
          psql -h localhost -U postgres -d postgres -w -a -f testDataInsertion.sql
          cd ..
      name: Initialise db
    - name: Use Node.js ${{ matrix.node_version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node_version }}
    - name: npm install and test
      run: |
        cd api
        npm install
        npx prisma db pull
        npx prisma generate
        npm run test --if-present
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres?schema=cars
        PORT: 3000
  type-checking:
    name: Run type checking
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node_version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node_version }}
    - name: npm install and type check
      run: |
        cd front
        npm install
        npx vue-tsc --noemit